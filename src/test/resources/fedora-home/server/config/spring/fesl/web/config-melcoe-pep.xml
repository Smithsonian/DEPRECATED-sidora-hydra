<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 Smithsonian Institution.

    Licensed under the Apache License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License.You may obtain a copy of
    the License at: http://www.apache.org/licenses/

    This software and accompanying documentation is supplied without
    warranty of any kind. The copyright holder and the Smithsonian Institution:
    (1) expressly disclaim any warranties, express or implied, including but not
    limited to any implied warranties of merchantability, fitness for a
    particular purpose, title or non-infringement; (2) do not assume any legal
    liability or responsibility for the accuracy, completeness, or usefulness of
    the software; (3) do not represent that use of the software would not
    infringe privately owned rights; (4) do not warrant that the software
    is error-free or will be maintained, supported, updated or enhanced;
    (5) will not be liable for any indirect, incidental, consequential special
    or punitive damages of any kind or nature, including but not limited to lost
    profits or loss of data, on any basis arising from contract, tort or
    otherwise, even if any of the parties has been warned of the possibility of
    such loss or damage.

    This distribution includes several third-party libraries, each with their own
    license terms. For a complete copy of all copyright and license terms, including
    those of third-party libraries, please see the product release notes.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-2.5.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.0.xsd">

   	<!--
		The pdp-client class is responsible for the PEP communicating with a PDP. By substituting
		in different classes for the client you can communicate with virtually any PDP.
	-->
	<bean id="pdp-client" class="org.fcrepo.server.security.xacml.pep.DirectPDPClient">
	  <constructor-arg ref="MelcoePDP" />
	</bean>
	<!--
		The response cache, as its name suggests, caches XACML responses based on a hash of an
		XACML request. Two identical requests produce the same hash and therefore can be used
		as a cache key. The cache by default is set to store 1000 entries and each entry lives
		for only 10 seconds.
		
		This can be changed to suit your needs, however if you want immediate
		application of changed policies you are going to have to keep this number very small.
		It is set to 10 seconds by default to handle multiple child/parent resolutions for a
		request when doing searches.
		
		If an item is found in the cache, then a request is not	sent to the PDP. Instead the previously
		calculated value is used.
	-->
	<bean id="response-cache" class="org.fcrepo.server.security.xacml.pep.ResponseCacheImpl">
	  <constructor-arg index="0" ref="org.fcrepo.server.security.xacml.util.ContextUtil" />
	  <constructor-arg index="1" value="1000" type="java.lang.Integer" />
	  <constructor-arg index="2" value="60000" type="java.lang.Long" />
	</bean>
	
		<!-- 
		This is the class used to handle the evaluation of requests. This implementation does
		this in a hierarchical fashion. It first checks for all policies pertaining to an object.
		Only if an object has no policies associated with it does it then check if the object has
		any parents. If parents are found then the policies are searched for and used. If none are
		found then it checks the parents of the parents until there are no more ancestors or a
		permit is found.
	-->
	<bean id="org.fcrepo.server.security.xacml.pep.EvaluationEngine" class="org.fcrepo.server.security.xacml.pep.EvaluationEngineImpl">
	  <property name="client" ref="pdp-client" />
	  <property name="responseCache" ref="response-cache" />
	  <property name="contextUtil" ref="org.fcrepo.server.security.xacml.util.ContextUtil" />
	</bean>
  
	
	<bean id="org.fcrepo.server.security.xacml.pep.ContextHandler" class="org.fcrepo.server.security.xacml.pep.ContextHandlerImpl">
      <property name="relationshipResolver" ref="org.fcrepo.server.security.xacml.util.RelationshipResolver" />
      <property name="evaluationEngine" ref="org.fcrepo.server.security.xacml.pep.EvaluationEngine" />
	  <property name="contextUtil" ref="org.fcrepo.server.security.xacml.util.ContextUtil" />
    </bean>
  
  	<bean id="org.fcrepo.server.security.xacml.util.RelationshipResolver" class="org.fcrepo.server.security.xacml.util.RIRelationshipResolver">
    <constructor-arg><ref bean="org.fcrepo.server.Server" /></constructor-arg>
    <constructor-arg>
      <map>
	    <entry key="xacml-parent-relationship-1" value="info:fedora/fedora-system:def/relations-external#isMemberOf" />
	    <entry key="xacml-parent-relationship-2" value="info:fedora/fedora-system:def/relations-external#isMemberOfCollection" />
	    <entry key="xacml-parent-relationship-3" value="info:fedora/fedora-system:def/relations-external#isPartOf" />
	    <!-- relationships from parent object to its child -->
	    <!-- NB need to use RIRelationshipResolver to use these -->
	    <entry key="xacml-child-relationship-1" value="info:fedora/fedora-system:def/relations-external#hasMember" />
	    <entry key="xacml-child-relationship-2" value="info:fedora/fedora-system:def/relations-external#hasCollectionMember" />
	    <entry key="xacml-child-relationship-3" value="info:fedora/fedora-system:def/relations-external#hasPart" />
      </map>
    </constructor-arg>
	</bean>

        <bean id="org.fcrepo.server.security.PolicyEnforcementPoint"
              class="org.fcrepo.server.security.xacml.pep.impl.FESLPolicyEnforcementPoint"
              autowire-candidate="true" init-method="init">
              <constructor-arg><ref bean="MelcoePDPConfig" /></constructor-arg>
              <constructor-arg><ref bean="org.fcrepo.server.security.ContextRegistry" /></constructor-arg>
        </bean>
        <bean id="org.fcrepo.server.security.Authorization"
              class="org.fcrepo.server.security.xacml.pep.impl.FESLAuthorization"
              autowire-candidate="true">
              <constructor-arg><ref bean="org.fcrepo.server.security.PolicyEnforcementPoint" /></constructor-arg>
        </bean>
	
</beans>
